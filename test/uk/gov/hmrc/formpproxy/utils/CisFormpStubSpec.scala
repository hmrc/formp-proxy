/*
 * Copyright 2025 HM Revenue & Customs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package uk.gov.hmrc.formpproxy.utils

import org.mockito.Mockito.*
import org.scalatest.freespec.AnyFreeSpec
import org.scalatest.matchers.must.Matchers
import org.scalatest.concurrent.ScalaFutures
import org.scalatestplus.mockito.MockitoSugar
import uk.gov.hmrc.formpproxy.models.{MonthlyReturn, UserMonthlyReturns}

import java.time.LocalDateTime

final class CisFormpStubSpec
  extends AnyFreeSpec
    with Matchers
    with ScalaFutures
    with MockitoSugar {

  private def mkReturn(id: Long, month: Int, year: Int = 2025): MonthlyReturn =
    MonthlyReturn(
      monthlyReturnId        = id,
      taxYear                = year,
      taxMonth               = month,
      nilReturnIndicator     = Some("N"),
      decEmpStatusConsidered = Some("Y"),
      decAllSubsVerified     = Some("Y"),
      decInformationCorrect  = Some("Y"),
      decNoMoreSubPayments   = Some("N"),
      decNilReturnNoPayments = Some("N"),
      status                 = Some("SUBMITTED"),
      lastUpdate             = Some(LocalDateTime.parse("2025-01-01T00:00:00")),
      amendment              = Some("N"),
      supersededBy           = None
    )

  "CisFormpStub getAllMonthlyReturns" - {

    "returns 3 rows generated by StubUtils for months 1,2,3 (order preserved), ignoring instanceId" in {
      val utils = mock[StubUtils]
      val r1 = mkReturn(1000001, 1)
      val r2 = mkReturn(1000002, 2)
      val r3 = mkReturn(1000003, 3)

      when(utils.generateMonthlyReturns(1)).thenReturn(r1)
      when(utils.generateMonthlyReturns(2)).thenReturn(r2)
      when(utils.generateMonthlyReturns(3)).thenReturn(r3)

      val stub = new CisFormpStub(utils)

      val out1 = stub.getAllMonthlyReturns("abc-123").futureValue
      val out2 = stub.getAllMonthlyReturns("different-instance").futureValue

      out1 mustBe UserMonthlyReturns(Seq(r1, r2, r3))
      out2 mustBe UserMonthlyReturns(Seq(r1, r2, r3))

      verify(utils, times(2)).generateMonthlyReturns(1)
      verify(utils, times(2)).generateMonthlyReturns(2)
      verify(utils, times(2)).generateMonthlyReturns(3)
      verifyNoMoreInteractions(utils)
    }

    "throws if StubUtils throws during generation (evaluated before Future.successful)" in {
      val utils = mock[StubUtils]
      when(utils.generateMonthlyReturns(1)).thenThrow(new RuntimeException("boom"))

      val stub = new CisFormpStub(utils)

      val ex = intercept[RuntimeException] {
        stub.getAllMonthlyReturns("any-instance")
      }
      ex.getMessage must include ("boom")
    }
  }
}